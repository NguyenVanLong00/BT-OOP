#include<iostream>
#include<random>
#include<ctime>
using namespace std;


class IntLinkListNode
{
public:
	int data;
	IntLinkListNode *next;
	IntLinkListNode(int d)
	{
		data = d;
		next = NULL;
	}

};

class IntLinkList
{
public:
	IntLinkListNode *head;
	IntLinkListNode *tail;
	int size;
	IntLinkList()
	{
		size = 0;
		head = NULL;
		tail = NULL;
	}
	~IntLinkList()
	{
		FreeSpace();
	}
	void PushBack(int data)
	{
		size++;
		IntLinkListNode *newNode = new IntLinkListNode(data);
		if (this->head == NULL)
		{
			this->head = newNode;
		}
		else if (tail == NULL)
		{
			this->tail = newNode;
			this->head->next = tail;
		}
		else {
			this->tail->next = newNode;
			tail = newNode;
		}
	}
	void InsertAt(int data, int n)
	{
		if (n >= size)
		{
			return;
		}
		int i = 0;
		IntLinkListNode *newNode = new IntLinkListNode(data);
		IntLinkListNode *current = head;
		while (i < n - 1)
		{
			i++;
			current = current->next;
		}
		newNode->next = current->next;
		current->next = newNode;
		size++;
	}
	void PintList()
	{
		IntLinkListNode *current = head;
		while (current != NULL)
		{
			cout << current->data << " ";
			current = current->next;
		}
		cout << endl;
	}
	void FreeSpace()
	{
		cout << "DESTROY" << endl;
		IntLinkListNode *current = head;
		IntLinkListNode *nextOne = head->next;
		head->next = NULL;
		head = NULL;
		for (int i = 0; i < size - 1; i++)
		{
			current->next = NULL;
			delete current;
			current = nextOne;
			nextOne = nextOne->next;
		}
		cout << head << endl;
		size = 0;
	}
};

void GetRandomItem(IntLinkList *list, int n)
{
	int i = 0;
	int t;
	srand(time(NULL) + list->head->data);
	while (i < n)
	{
		t = rand() % 100 + 1;

		if (t >= list->tail->data)
		{
			list->PushBack(t);
			i++;
		}

	}

}

IntLinkList *NoiList(IntLinkListNode *head1, IntLinkListNode *head2)
{
	IntLinkList *result = new IntLinkList;
	IntLinkListNode *current1 = head1;
	IntLinkListNode *current2 = head2;
	while (current1 != NULL || current2 != NULL)
	{
		if (current1 == NULL)
		{
			result->PushBack(current2->data);
			current2 = current2->next;
		}
		else if(current2==NULL)
		{
			result->PushBack(current1->data);
			current1 = current1->next;
		}
		else
		{
			if (current1->data < current2->data)
			{
				result->PushBack(current1->data);
				current1 = current1->next;
			}
			else if (current1->data > current2->data)
			{
				result->PushBack(current2->data);
				current2 = current2->next;
			}
			else
			{
				result->PushBack(current2->data);
				result->PushBack(current1->data);
				current1 = current1->next;
				current2 = current2->next;
			}
		}

	}
	return result;
}

int main()
{
	IntLinkList new1;
	IntLinkList new2;
	srand(time(NULL));
	for (int i = 0; i < 2; i++)
	{
		new1.PushBack(i);
		new2.PushBack(i + 1);
	}
	GetRandomItem(&new1, 10);
	GetRandomItem(&new2, 10);

	IntLinkList *new3 = NoiList(new1.head, new2.head);
	new1.PintList();
	cout << new1.size << endl;
	new2.PintList();
	cout << new2.size << endl;
	new3->PintList();
	cout << new3->size << endl;
	system("pause");
	return 0;
}
